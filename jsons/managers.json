{
  "managers": [
    {
      "name": "folder_structure_manager",
      "description": "A manager that orchestrates the generation of a folder structure for a Flutter project.",
      "keywords": [
        "create app folder structure",
        "generate app folder structure",
        "add folder"
      ],
      "steps": [
        {
          "id": 1,
          "description": "Ask the user for the app name.",
          "assistant": "ask_user",
          "method": "gather_info",
          "inputs": {
            "parameters": [
              {
                "name": "app_name",
                "type": "string in snake_case",
                "prompt": "What is the name for your new Flutter application?"
              }
            ]
          },
          "outputs": {
            "result": "user_inputs"
          }
        },
        {
          "id": 2,
          "description": "Generate the flutter command to create a new flutter project.",
          "assistant": "shell_assistant",
          "method": "generate_command",
          "inputs": {
            "instruction": "Generate the flutter command to create a new flutter project. flutter create {{context.user_inputs.app_name}}"
          },
          "outputs": {
            "result": "flutter_create_dto"
          }
        },
        {
          "id": 3,
          "description": "Execute the 'flutter create' command.",
          "assistant": "shell_assistant",
          "method": "run_command",
          "inputs": {
            "dto": "{{context.flutter_create_dto}}"
          }
        },
        {
          "id": 4,
          "description": "Generate the main app folder structure inside the new project.",
          "assistant": "folder_architect",
          "method": "architect_folder",
          "inputs": {
            "json_file": "jsons/app_folder_structure.json",
            "base_path": "{{context.user_inputs.app_name}}"
          }
        },
        {
          "id": 5,
          "description": "Generate the assets folder structure.",
          "assistant": "folder_architect",
          "method": "architect_folder",
          "inputs": {
            "json_file": "jsons/assets_folder_structure.json",
            "base_path": "{{context.user_inputs.app_name}}"
          }
        },
        {
          "id": 6,
          "description": "Add asset directories from JSON to pubspec.yaml.",
          "assistant": "yaml_editor",
          "method": "add_asset_dirs_from_json",
          "inputs": {
            "pubspec_path": "{{context.user_inputs.app_name}}/pubspec.yaml",
            "key_path": "flutter.assets",
            "json_path": "jsons/assets_folder_structure.json"
          }
        }
      ]
    },
    {
      "name": "style_config_manager",
      "description": "A manager that orchestrates the generation of a style config for a Flutter project.",
      "keywords": [
        "create style config",
        "generate style config"
      ],
      "steps": [
        {
          "id": 1,
          "description": "Copy style jsons into project assets",
          "assistant": "file_helper",
          "method": "copy_directory_contents",
          "inputs": {
            "source_dir": "jsons/style_config/",
            "destination_dir": "{{context.user_inputs.app_name}}/assets/style_config/"
          },
          "outputs": {
            "result": "config files copied to the assets"
          }
        },
        {
          "id": 2,
          "description": "Ask the user for the seed color.",
          "assistant": "ask_user",
          "method": "gather_info",
          "inputs": {
            "parameters": [
              {
                "name": "seed_color",
                "type": "color hex code",
                "prompt": "What is the seed color for the color scheme?"
              }
            ]
          },
          "outputs": {
            "result": "user_inputs"
          }
        },
        {
          "id": 3,
          "description": "Generate Material color schemes from the seed color.",
          "assistant": "scheme_generator",
          "method": "generate_material_schemes",
          "inputs": {
            "seed_hex": "{{context.user_inputs.seed_color}}"
          },
          "outputs": {
            "result": "schemes"
          }
        },
        {
          "id": 4,
          "description": "Write the generated schemes to a JSON file.",
          "assistant": "file_helper",
          "method": "write_file",
          "inputs": {
            "file_path": "assets/app_colors.json",
            "content": "{\"light\": {{context.schemes.light}}, \"dark\": {{context.schemes.dark}} }"
          }
        },
        {
          "id": 5,
          "description": "Ask the user for the primary font for the typescale.",
          "assistant": "ask_user",
          "method": "gather_info",
          "inputs": {
            "parameters": [
              {
                "name": "primary_font",
                "type": "font name",
                "prompt": "What is the primary font for the typescale (e.g., Roboto)?"
              }
            ]
          },
          "outputs": {
            "result": "user_inputs"
          }
        },
        {
          "id": 6,
          "description": "Generate the typography JSON based on the user's font.",
          "assistant": "typography_generator",
          "method": "generate",
          "inputs": {
            "base_font": "{{context.user_inputs.primary_font}}"
          },
          "outputs": {
            "result": "typography_json"
          }
        },
        {
          "id": 7,
          "description": "Write the generated typography styles to a JSON file.",
          "assistant": "file_helper",
          "method": "write_file",
          "inputs": {
            "file_path": "assets/style_config/primary_font.json",
            "content": "{{context.typography_json}}"
          }
        },
        {
          "id": 8,
          "description": "Iteratively ask the user for font family details.",
          "assistant": "ask_user",
          "method": "gather_list",
          "inputs": {
            "item_name": "font_family",
            "parameters": [
              {
                "name": "family",
                "type": "font family name (e.g., Tenor)",
                "prompt": "What is the font family name?"
              },
              {
                "name": "fonts",
                "type": "comma-separated file paths",
                "prompt": "Enter the asset paths for the font files (e.g., assets/fonts/Tenor-Regular.ttf)"
              },
              {
                "name": "locale",
                "type": "language code (e.g., en, zh)",
                "prompt": "What is the locale for this font?"
              },
              {
                "name": "fontFeatures",
                "type": "comma-separated list (e.g., kern, liga)",
                "prompt": "List any font features to apply (or press Enter for none)."
              }
            ]
          },
          "outputs": {
            "result": "font_families_list"
          }
        },
        {
          "id": 9,
          "description": "Write the collected font families to a JSON file.",
          "assistant": "file_helper",
          "method": "write_file",
          "inputs": {
            "file_path": "assets/style_config/font_family.json",
            "content": "{{context.font_families_list}}"
          }
        },
        {
          "id": 10,
          "description": "Add the collected font families to the project's pubspec.yaml.",
          "assistant": "yaml_editor",
          "method": "add_font_families_from_list",
          "inputs": {
            "file_path": "pubspec.yaml",
            "key_path": "flutter.fonts",
            "font_families_list": "{{context.font_families_list}}"
          }
        }
      ]
    }
  ]
}
